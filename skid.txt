there is a client thats open source called nonsense, here are all events that it  has and an example module that (src/main/java/wtf/bhopper/nonsense/event) 
..bhopper/nonsense/event/Cancellable.java package wtf.bhopper.nonsense.event;

public abstract class Cancellable implements Event {

    private boolean cancelled;

    public boolean isCancelled() {
        return this.cancelled;
    }

    public void setCancelled(boolean cancelled) {
        this.cancelled = cancelled;
    }

    public void cancel() {
        this.cancelled = true;
    }

}


.../event.java package wtf.bhopper.nonsense.event;

public interface Event {
}

.../eventbus.java package wtf.bhopper.nonsense.event;

import org.jetbrains.annotations.NotNull;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.*;

public class EventBus {

    private final Map<Type, List<CallSite>> callSiteMap;
    private final Map<Type, List<Listener<Event>>> listenerCache;

    private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();

    public EventBus() {
        callSiteMap = new HashMap<>();
        listenerCache = new HashMap<>();
    }

    public void subscribe(final Object subscriber) {

        for (final Field field : subscriber.getClass().getDeclaredFields()) {
            final EventLink annotation = field.getAnnotation(EventLink.class);
            if (annotation != null) {
                final Type eventType = ((ParameterizedType) (field.getGenericType())).getActualTypeArguments()[0];

                if (!field.canAccess(subscriber)) {
                    field.setAccessible(true);
                }

                try {
                    @SuppressWarnings("unchecked")
                    final Listener<Event> listener =
                            (Listener<Event>) LOOKUP.unreflectGetter(field)
                                    .invokeWithArguments(subscriber);

                    final int priority = annotation.value();

                    final List<CallSite> callSites;
                    final CallSite callSite = new CallSite(subscriber, listener, priority);

                    if (this.callSiteMap.containsKey(eventType)) {
                        callSites = this.callSiteMap.get(eventType);
                        callSites.add(callSite);
                        callSites.sort(Comparator.naturalOrder());
                    } else {
                        callSites = new ArrayList<>(1);
                        callSites.add(callSite);
                        this.callSiteMap.put(eventType, callSites);
                    }
                } catch (Throwable ignored) {
                }
            }
        }

        this.populateListenerCache();
    }

    public void unsubscribe(final Object subscriber) {
        for (List<CallSite> callSites : this.callSiteMap.values()) {
            callSites.removeIf(eventCallSite -> eventCallSite.owner == subscriber);
        }

        this.populateListenerCache();
    }

    public void post(final Event event) {
        final List<Listener<Event>> listeners = listenerCache.getOrDefault(event.getClass(), Collections.emptyList());

        int listenersSize = listeners.size();

        while (listenersSize > 0) {
            listeners.get(--listenersSize).call(event);
        }
    }

    private void populateListenerCache() {
        final Map<Type, List<CallSite>> callSiteMap = this.callSiteMap;
        final Map<Type, List<Listener<Event>>> listenerCache = this.listenerCache;

        for (final Type type : callSiteMap.keySet()) {
            final List<CallSite> callSites = callSiteMap.get(type);
            final int size = callSites.size();
            final List<Listener<Event>> listeners = new ArrayList<>(size);

            for (CallSite callSite : callSites) {
                listeners.add(callSite.listener);
            }

            listenerCache.put(type, listeners);
        }
    }

    private record CallSite(Object owner, Listener<Event> listener, int priority) implements Comparable<CallSite> {
        @Override
        public int compareTo(@NotNull EventBus.CallSite o) {
            return Integer.compare(this.priority, o.priority);
        }
    }

}


.../eventlink.java package wtf.bhopper.nonsense.event;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface EventLink {
    int value() default EventPriorities.MEDIUM;
}




.../EventPriorities.java package wtf.bhopper.nonsense.event;

public class EventPriorities {

    public static final int VERY_LOW = 0;
    public static final int LOW = 1;
    public static final int MEDIUM = 2;
    public static final int HIGH = 3;
    public static final int VERY_HIGH = 4;

}



new directory that u have to remeber : src/main/java/wtf/bhopper/nonsense/event/impl
/client, there are the files called

EventJoinServer.java package wtf.bhopper.nonsense.event.impl.client;

import wtf.bhopper.nonsense.event.Event;

public class EventJoinServer implements Event {

    public final String ip;
    public final int port;

    public EventJoinServer(String ip, int port) {
        this.ip = ip;
        this.port = port;
    }

}




EventKeyPress.java package wtf.bhopper.nonsense.event.impl.client;

import wtf.bhopper.nonsense.event.Event;

public class EventKeyPress implements Event {

    public final int key;

    public EventKeyPress(int key) {
        this.key = key;
    }

}




eventtick.java package wtf.bhopper.nonsense.event.impl.client;

import wtf.bhopper.nonsense.event.Event;

public class EventTick implements Event {
}

EventWorldChange.java package wtf.bhopper.nonsense.event.impl.client;

import wtf.bhopper.nonsense.event.Event;

public class EventWorldChange implements Event {
} 



new directory that u have to remeber : /src/main/java/wtf/bhopper/nonsense/event/impl
/packet/



EventActionStates.java package wtf.bhopper.nonsense.event.impl.packet;

import wtf.bhopper.nonsense.event.Event;

public class EventActionStates implements Event {

    public boolean sprinting;
    public boolean sneaking;

    public EventActionStates(boolean sprinting, boolean sneaking) {
        this.sprinting = sprinting;
        this.sneaking = sneaking;
    }

}


EventReceivePacket.java package wtf.bhopper.nonsense.event.impl.packet;

import net.minecraft.network.Packet;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventReceivePacket extends Cancellable {

    public Packet packet;

    public EventReceivePacket(Packet packet) {
        this.packet = packet;
    }

}



EventReceivePacket.java package wtf.bhopper.nonsense.event.impl.packet;

import net.minecraft.network.Packet;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventReceivePacket extends Cancellable {

    public Packet packet;

    public EventReceivePacket(Packet packet) {
        this.packet = packet;
    }

}


EventSendPacket.java package wtf.bhopper.nonsense.event.impl.packet;

import net.minecraft.network.Packet;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventSendPacket extends Cancellable {

    public Packet<?> packet;

    public EventSendPacket(Packet<?> packet) {
        this.packet = packet;
    }

}



EventTeleport.java package wtf.bhopper.nonsense.event.impl.packet;

import net.minecraft.network.play.client.C03PacketPlayer;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventTeleport extends Cancellable {

    public C03PacketPlayer response;
    public double x;
    public double y;
    public double z;
    public float yaw;
    public float pitch;

    public EventTeleport(C03PacketPlayer response, double x, double y, double z, float yaw, float pitch) {
        this.response = response;
        this.x = x;
        this.y = y;
        this.z = z;
        this.yaw = yaw;
        this.pitch = pitch;
    }

}

new directory for u to remember : src/main/java/wtf/bhopper/nonsense/event/impl/player
/interact/

EventClickAction.java package wtf.bhopper.nonsense.event.impl.player.interact;

import net.minecraft.util.MovingObjectPosition;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventClickAction extends Cancellable {

    public MovingObjectPosition mouseOver;

    public final boolean leftButton;
    public boolean left;
    public boolean leftSwing;

    public final boolean rightButton;
    public boolean right;
    public boolean rightSwing;

    public final boolean releaseButton;
    public boolean release;

    public boolean postRight;

    public boolean blockClick;
    public MovingObjectPosition blockClickTarget;

    public final boolean usingItem;

    public EventClickAction(MovingObjectPosition mouseOver, boolean leftButton, boolean rightButton, boolean releaseButton, boolean postRight, boolean blockClick, boolean usingItem) {
        this.mouseOver = mouseOver;
        this.leftButton = leftButton;
        this.left = !usingItem && leftButton;
        this.leftSwing = true;
        this.rightButton = rightButton;
        this.right = !usingItem && rightButton;
        this.rightSwing = true;
        this.releaseButton = releaseButton;
        this.release = usingItem && releaseButton;
        this.blockClick = blockClick;
        this.blockClickTarget = mouseOver;
        this.postRight = postRight;
        this.usingItem = usingItem;
    }

}



EventMouseOver.java package wtf.bhopper.nonsense.event.impl.player.interact;

import net.minecraft.util.MovingObjectPosition;
import wtf.bhopper.nonsense.event.Event;

public class EventMouseOver implements Event {

    public MovingObjectPosition mouseOver;

    public EventMouseOver(MovingObjectPosition mouseOver) {
        this.mouseOver = mouseOver;
    }

}

EventPostClick.java package wtf.bhopper.nonsense.event.impl.player.interact;

import net.minecraft.util.MovingObjectPosition;
import wtf.bhopper.nonsense.event.Event;

public class EventPostClick implements Event {

    public final Button button;
    public final boolean artificial;
    public final MovingObjectPosition mouseOver;

    public EventPostClick(Button button, boolean artificial, MovingObjectPosition mouseOver) {
        this.button = button;
        this.artificial = artificial;
        this.mouseOver = mouseOver;
    }

    public enum Button {
        LEFT,
        RIGHT
    }

}


eventpreclick.java package wtf.bhopper.nonsense.event.impl.player.interact;

import net.minecraft.util.MovingObjectPosition;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventPreClick extends Cancellable {

    public final Button button;
    public final boolean artificial;
    public MovingObjectPosition mouseOver;

    public EventPreClick(Button button, boolean artificial, MovingObjectPosition mouseOver) {
        this.button = button;
        this.artificial = artificial;
        this.mouseOver = mouseOver;
    }

    public enum Button {
        LEFT,
        RIGHT
    }

}


EventReleaseItem.java package wtf.bhopper.nonsense.event.impl.player.interact;

import wtf.bhopper.nonsense.event.Cancellable;

public class EventReleaseItem extends Cancellable {


}



new directory Nonsense-Client/src/main/java/wtf/bhopper/nonsense/event/impl
/player


EventChangeItem.java package wtf.bhopper.nonsense.event.impl.player.inventory;

import wtf.bhopper.nonsense.event.Cancellable;

public class EventChangeItem extends Cancellable {

    public int direction;

    public EventChangeItem(int direction) {
        this.direction = direction;
    }

}




EventSelectItem.java package wtf.bhopper.nonsense.event.impl.player.inventory;

import wtf.bhopper.nonsense.event.Event;

public class EventSelectItem implements Event {

    public int slot;
    public final int prevSlot;
    public boolean silent;
    public final boolean swapped;

    public EventSelectItem(int slot, int prevSlot, boolean swapped) {
        this.slot = slot;
        this.prevSlot = prevSlot;
        this.silent = false;
        this.swapped = swapped;
    }

}


EventWindowClick.java package wtf.bhopper.nonsense.event.impl.player.inventory;

import wtf.bhopper.nonsense.event.Cancellable;

import java.util.ArrayList;
import java.util.List;

public class EventWindowClick extends Cancellable {

    public static boolean wasTriggeredInWindow = false;

    public final int trueWindowId;
    public int windowId;
    public int slotId;
    public int button;
    public int mode;
    public final List<InventoryAction> secondaryActions = new ArrayList<>(); // Any further actions to be made, usage of this may flag certain anti-cheats

    public EventWindowClick(int windowId) {
        this.trueWindowId = windowId;
        this.windowId = -1;
        this.slotId = -1;
        this.button = -1;
        this.mode = -1;
    }

    public EventWindowClick(int windowId, int slotId, int button, int mode) {
        this.trueWindowId = this.windowId = windowId;
        this.slotId = slotId;
        this.button = button;
        this.mode = mode;
    }

    public void addSecondaryAction(int windowId, int slot, int mouseButtonClicked, int mode) {
        this.secondaryActions.add(new InventoryAction(windowId, slot, mouseButtonClicked, mode));
    }

    public record InventoryAction(int windowId, int slot, int button, int mode) { }

}




new directory Nonsense-Client/src/main/java/wtf/bhopper/nonsense/event/impl/player 
/movement

EventJump.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Cancellable;

public class EventJump extends Cancellable {
    public float motion;
    public float yaw;

    public EventJump(float motion, float yaw) {
        this.motion = motion;
        this.yaw = yaw;
    }

}


EventMove.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Event;

public class EventMove implements Event {

    public double x;
    public double y;
    public double z;

    public EventMove(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

}


EventMovementInput.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Event;

public class EventMovementInput implements Event {

    public float forwards;
    public float strafe;
    public boolean jump;
    public boolean sneak;

    public EventMovementInput(float forwards, float strafe, boolean jump, boolean sneak) {
        this.forwards = forwards;
        this.strafe = strafe;
        this.jump = jump;
        this.sneak = sneak;
    }

}


EventPostStep.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Event;

public class EventPostStep implements Event {

    public double height;
    public double realHeight;

    public EventPostStep(double height, double realHeight) {
        this.height = height;
        this.realHeight = realHeight;
    }


}


EventPreStep.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Event;

public class EventPreStep implements Event {

    public double height;

    public EventPreStep(double height) {
        this.height = height;
    }

}



EventPushOutOfBlocks.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Cancellable;

public class EventPushOutOfBlocks extends Cancellable {
}


EventSlowDown.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Cancellable;

public class EventSlowDown extends Cancellable {

    public float factor;

    public EventSlowDown(float factor) {
        this.factor = factor;
    }

}


EventSpeed.java package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Cancellable;



public class EventSpeed extends Cancellable {

    public double speed;
    public float yaw;
    public double forward;
    public double strafe;

    public EventSpeed(double speed, float yaw, double forward, double strafe) {
        this.speed = speed;
        this.yaw = yaw;
        this.forward = forward;
        this.strafe = strafe;
    }

}


EventStrafe.java 
package wtf.bhopper.nonsense.event.impl.player.movement;

import wtf.bhopper.nonsense.event.Event;
import wtf.bhopper.nonsense.util.minecraft.IMinecraft;

public class EventStrafe implements Event, IMinecraft {

    public float forward;
    public float strafe;
    public float friction;
    public float yaw;

    public EventStrafe(float forward, float strafe, float friction, float yaw) {
        this.forward = forward;
        this.strafe = strafe;
        this.friction = friction;
        this.yaw = yaw;
    }

    public void setSpeed(double speed, double motionMultiplier) {
        this.friction = (this.forward != 0.0F && this.strafe != 0.0F) ? (float)speed * 0.98F : (float)speed;
        mc.thePlayer.motionX *= motionMultiplier;
        mc.thePlayer.motionZ *= motionMultiplier;
    }

    public void setSpeed(double speed) {
        this.friction = (this.forward != 0.0F && this.strafe != 0.0F) ? (float)speed * 0.98F : (float)speed;
        mc.thePlayer.motionX = mc.thePlayer.motionZ = 0.0;
    }

}

new directory src/main/java/wtf/bhopper/nonsense/event/impl/world


EventBlockAcceleration.java package wtf.bhopper.nonsense.event.impl.world;

import wtf.bhopper.nonsense.event.Cancellable;

public class EventBlockAcceleration extends Cancellable {
}


EventBlockBounds.java package wtf.bhopper.nonsense.event.impl.world;

import net.minecraft.block.Block;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventBlockBounds extends Cancellable {

    public final Block block;
    public final BlockPos pos;
    public AxisAlignedBB bounds;

    public EventBlockBounds(Block block, BlockPos pos, AxisAlignedBB bounds) {
        this.block = block;
        this.pos = pos;
        this.bounds = bounds;
    }

}



EventBlockCollision.java package wtf.bhopper.nonsense.event.impl.world;

import net.minecraft.block.state.IBlockState;
import net.minecraft.util.BlockPos;
import wtf.bhopper.nonsense.event.Cancellable;

public class EventBlockCollision extends Cancellable {

    public final BlockPos pos;
    public final IBlockState state;

    public EventBlockCollision(BlockPos pos, IBlockState state) {
        this.pos = pos;
        this.state = state;
    }

}












here is an example module that can be found in src/main/java/wtf/bhopper/nonsense/module/impl, there are 6 subfolders called visual player other movement exploit and combat

here is an example velocity module :  package wtf.bhopper.nonsense.module.impl.combat;

import net.minecraft.network.play.server.S12PacketEntityVelocity;
import wtf.bhopper.nonsense.event.EventLink;
import wtf.bhopper.nonsense.event.Listener;
import wtf.bhopper.nonsense.event.impl.packet.EventReceivePacket;
import wtf.bhopper.nonsense.event.impl.client.EventTick;
import wtf.bhopper.nonsense.module.AbstractModule;
import wtf.bhopper.nonsense.module.ModuleCategory;
import wtf.bhopper.nonsense.module.ModuleInfo;
import wtf.bhopper.nonsense.module.property.impl.EnumProperty;
import wtf.bhopper.nonsense.module.property.impl.NumberProperty;
import wtf.bhopper.nonsense.util.minecraft.player.PlayerUtil;

@ModuleInfo(name = "Velocity",
        description = "Reduces/removes knock-back.",
        category = ModuleCategory.COMBAT,
        searchAlias = {"Anti Knock Back", "Anti KB", "Anti Velocity"})
public class Velocity extends AbstractModule {

    private final EnumProperty<Mode> mode = new EnumProperty<>("Mode", "Method for velocity.", Mode.NORMAL);
    private final NumberProperty vertical = new NumberProperty("Vertical", "Vertical velocity", () -> this.mode.is(Mode.NORMAL), 0.0F, 0.0F, 100.0F, 0.01F, NumberProperty.FORMAT_PERCENT);
    private final NumberProperty horizontal = new NumberProperty("Horizontal", "Horizontal velocity", () -> this.mode.is(Mode.NORMAL), 0.0F, 0.0F, 100.0F, 0.01F, NumberProperty.FORMAT_PERCENT);
    private final NumberProperty airTicks = new NumberProperty("Ticks", "Air velocity ticks.", () -> this.mode.is(Mode.AIR), 5.0, 1.0, 20.0, 1.0, NumberProperty.FORMAT_INT);

    private int ticks = 0;
    private boolean cancel = false;

    public Velocity() {
        super();
        this.addProperties(this.mode, this.vertical, this.horizontal, this.airTicks);
        this.setSuffix(() -> {
            if (this.mode.is(Mode.NORMAL)) {
                return vertical.getDisplayValue() + " " + horizontal.getDisplayValue();
            }
            return this.mode.getDisplayValue();
        });
    }

    @EventLink
    public final Listener<EventTick> onTick = _ -> {

        if (!PlayerUtil.canUpdate()) {
            return;
        }

        if (!mc.thePlayer.onGround) {
            this.ticks++;
        } else {
            this.ticks = 0;
        }

        if (this.ticks >= this.airTicks.get()) {
            this.cancel = true;
        } else if (ticks == 0) {
            this.cancel = false;
        }
    };

    @EventLink
    public final Listener<EventReceivePacket> onReceivePacket = event -> {

        if (event.packet instanceof S12PacketEntityVelocity packet) {

            if (packet.getEntityID() != mc.thePlayer.getEntityId()) {
                return;
            }

            switch (this.mode.get()) {
                case NORMAL -> {
                    event.cancel();

                    if (this.vertical.get() != 0.0F) {
                        double v = vertical.get() / 100.0;
                        double my = (double)packet.getMotionY() / 8000.0;
                        mc.thePlayer.motionY = my * v;
                    }

                    if (this.horizontal.get() != 0.0F) {
                        double h = horizontal.get() / 100.0;
                        double mx = (double)packet.getMotionX() / 8000.0;
                        double mz = (double)packet.getMotionZ() / 8000.0;
                        mc.thePlayer.motionX = mx * h;
                        mc.thePlayer.motionZ = mz * h;
                    } else {
                        event.setCancelled(true);
                    }
                }

                case AIR -> {
                    event.cancel();
                    if (!this.cancel) {
                        mc.thePlayer.motionY = (double)packet.getMotionY() / 8000.0;
                    }
                }
            }
        }
        // commented out, that's not how explosion velo works m8 - Shae/qe7
        /* else if (event.packet instanceof S27PacketExplosion packet) {
            switch (this.mode.get()) {
                case NORMAL -> packet.setMotion(
                        packet.getMotionX() * this.horizontal.getFloat(),
                        packet.getMotionY() * this.vertical.getFloat(),
                        packet.getMotionZ() * this.horizontal.getFloat()
                );

                case AIR -> packet.setMotion(
                        packet.getMotionX() * this.horizontal.getFloat(),
                        packet.getMotionY(),
                        packet.getMotionZ() * this.horizontal.getFloat()
                );
            }
        }*/

    };

    enum Mode {
        NORMAL,
        AIR
    }

}



if you understand the clients basics say yes
